import static org.junit.Assert.*;

import java.io.File;
import java.nio.charset.StandardCharsets;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.Statement;

import org.dbunit.IDatabaseTester;
import org.dbunit.JdbcDatabaseTester;
import org.dbunit.dataset.IDataSet;
import org.dbunit.dataset.xml.FlatXmlDataSet;
import org.dbunit.operation.DatabaseOperation;
import org.hsqldb.jdbc.JDBCDataSource;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;


public class XmlDatabaseTest {

	public static final String JDBC_DRIVER = "org.hsqldb.jdbcDriver";
	public static final String JDBC_URL = "jdbc:hsqldb:mem";
	public static final String USER = "sa";
	public static final String PASSWORD = "";
	
	private static Statement statement;
	
	
	@BeforeClass
	public static void createSchema() throws Exception {
		try{
			Connection c = DriverManager.getConnection(JDBC_URL);
			statement = c.createStatement();
			
			ResultSet rs = c.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while(rs.next()){
				if("Person".equalsIgnoreCase(rs.getString("TABLE_NAME"))){
					tableExists = true;
					break;
					
				}
			}
			
			if(!tableExists)
				statement.executeUpdate("CREATE TABLE PERSON(ID bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, NAME varchar(50), LAST_NAME varchar(50), AGE int)");
		
		} catch(SQLException e){
			e.printStackTrace();
		}
	}
	
	@Before
	public void importDataSet() throws Exception {
		IDataSet dataSet = readDataSet();
		cleanlyInsert(dataSet);
	}

	private IDataSet readDataSet() throws Exception {
		return new FlatXmlDataSet(new File("IDataSets/dataset.xml"));
	}
	
	private void cleanlyInsert(IDataSet dataSet) throws Exception {
		IDatabaseTester databaseTester = new JdbcDatabaseTester(JDBC_DRIVER,JDBC_URL,USER,PASSWORD);
		databaseTester.setSetUpOperation(DatabaseOperation.CLEAN_INSERT);
		databaseTester.setDataSet(dataSet);
		databaseTester.onSetup();
	}

	@Test
	public void findsAndReadsExistingPersonByFirstName() throws Exception {
		PersonRepository repository = new PersonRepository(dataSource());
		Person charlie = repository.findPersonByFirstName("Charlie");
		repository.closeConnection();
		assertEquals(charlie.getNAME(), "Charlie");
	}
	
	@Test
	public void addNewPerson() throws Exception {
		PersonRepository repository = new PersonRepository(dataSource());
		Boolean result = repository.addPerson("Klaudia", "Pa³kowska", 22);
		repository.closeConnection();
		assertTrue(result);
	}
	
	@Test(expected = SQLNonTransientConnectionException.class)
	public void addBadNewPerson() throws Exception {
		PersonRepository repository = new PersonRepository(dataSource());
		repository.closeConnection();
		Boolean result = repository.addPerson("Klaudia", "Pa³kowska", 22);
		assertTrue(result);
	}
	
	@Test
	public void updatePerson() throws Exception {
		PersonRepository repository = new PersonRepository(dataSource());
		Person person = repository.findPersonByFirstName("Charlie");
		Boolean result = repository.updatePerson("Ola", "Charlie");
		repository.closeConnection();
		assertTrue(result);
	}
	
	@Test
	public void deletePerson() throws Exception {
		PersonRepository repository = new PersonRepository(dataSource());
		Boolean result = repository.addPerson("Klaudia", "Pa³kowska", 22);
		Boolean result2 = repository.deletePerson("Klaudia");
		repository.closeConnection();
		assertTrue(result2);
	}
	
	@Test
	public void returnsNullWhenPersonCannotBeFound() throws Exception {
		PersonRepository repository = new PersonRepository(dataSource());
		Person charlie = repository.findPersonByFirstName("iDoNotExist");
		repository.closeConnection();
		assertEquals(charlie, null);
	}
	
	private JDBCDataSource dataSource() throws SQLException{
		JDBCDataSource dataSource = new JDBCDataSource();
		dataSource.setURL(JDBC_URL);
		dataSource.setUser(USER);
		dataSource.setPassword(PASSWORD);
		return dataSource;
	}
	
}
